import 'reflect-metadata';
import { AccountManager } from './manager/AccountManager';
import { DataRequestManager } from './manager/DataRequestManager';
import { ExternalServicesManager } from './manager/ExternalServicesManager';
import { OfferManager } from './manager/OfferManager';
import { OfferRankManager } from './manager/OfferRankManager';
import { OfferRankManagerImpl } from './manager/OfferRankManagerImpl';
import { ProfileManager } from './manager/ProfileManager';
import { SearchManager, SortOfferSearch } from './manager/SearchManager';
import { VerifyManager } from './manager/VerifyManager';
import { WalletManager } from './manager/WalletManager';
import { WalletManagerImpl } from './manager/WalletManagerImpl';
import { PermissionsSource } from './repository/assistant/PermissionsSource';
import { SiteDataSource } from './repository/assistant/SiteDataSource';
import { ClientDataRepository } from './repository/client/ClientDataRepository';
import Account from './repository/models/Account';
import { DataRequest } from './repository/models/DataRequest';
import { DeepCopy } from './repository/models/DeepCopy';
import { FieldData } from './repository/models/FieldData';
import { FileMeta } from './repository/models/FileMeta';
import { InputGraphData } from './repository/models/InputGraphData';
import { JsonObject } from './repository/models/JsonObject';
import { JsonTransform } from './repository/models/JsonTransform';
import Offer from './repository/models/Offer';
import { OfferInteraction, OfferResultAction } from './repository/models/OfferInteraction';
import { OfferPrice } from './repository/models/OfferPrice';
import { OfferPriceRules } from './repository/models/OfferPriceRules';
import { OfferRank } from './repository/models/OfferRank';
import { OfferSearch } from './repository/models/OfferSearch';
import OfferSearchResultItem from './repository/models/OfferSearchResultItem';
import OfferShareData from './repository/models/OfferShareData';
import { GraphLink, LinkType, OutputGraphData } from './repository/models/OutputGraphData';
import { Page, Pageable } from './repository/models/Page';
import { Pair } from './repository/models/Pair';
import Profile from './repository/models/Profile';
import SearchRequest from './repository/models/SearchRequest';
import { ExternalService } from './repository/models/services/ExternalService';
import { HttpServiceCall } from './repository/models/services/HttpServiceCall';
import { ServiceCall, ServiceCallType } from './repository/models/services/ServiceCall';
import { ServiceResponse } from './repository/models/services/ServiceResponse';
import { SharedData } from './repository/models/SharedData';
import SimpleAccount from './repository/models/SimpleAccount';
import { Site } from './repository/models/Site';
import { OfferRepository } from './repository/offer/OfferRepository';
import { OfferShareDataRepository } from './repository/offer/OfferShareDataRepository';
import OfferShareDataRepositoryImpl from './repository/offer/OfferShareDataRepositoryImpl';
import { OfferRankRepositoryImpl } from './repository/offerRank/OfferRankRepositoryImpl';
import { RepositoryStrategyType } from './repository/RepositoryStrategyType';
import { OfferSearchRepository, OfferSearchRequestInterestMode } from './repository/search/OfferSearchRepository';
import { OfferSearchRepositoryImpl } from './repository/search/OfferSearchRepositoryImpl';
import { SearchRequestRepository } from './repository/search/SearchRequestRepository';
import { ExternalServicesRepository } from './repository/services/ExternalServicesRepository';
import { HttpTransport } from './repository/source/http/HttpTransport';
import { HttpTransportImpl } from './repository/source/http/HttpTransportImpl';
import { AccessTokenInterceptor } from './repository/source/rpc/AccessTokenInterceptor';
import { JsonRpc } from './repository/source/rpc/JsonRpc';
import { JsonRpcHttpInterceptorAdapter } from './repository/source/rpc/JsonRpcHttpInterceptorAdapter';
import { RpcInterceptor } from './repository/source/rpc/RpcInterceptor';
import { VerifyRepository } from './repository/verify/VerifyRepository';
import { Logger } from './utils/BasicLogger';
import { BitKeyPair } from './utils/keypair/BitKeyPair';
import { TokenType } from './utils/keypair/rpc/RpcToken';
import { AbstractWalletValidator } from './utils/types/validators/AbstractWalletValidator';
import { IsBasePublicKey } from './utils/types/validators/annotations/IsBasePublicKey';
import { IsBtcAddress } from './utils/types/validators/annotations/IsBtcAddress';
import { IsEthAddress } from './utils/types/validators/annotations/IsEthAddress';
import { IsTypedArray } from './utils/types/validators/annotations/IsTypedArray';
import { AppWalletValidator } from './utils/types/validators/AppWalletValidator';
import { BtcWalletValidator } from './utils/types/validators/BtcWalletValidator';
import { EthWalletValidator } from './utils/types/validators/EthWalletValidator';
import { ValidationResult } from './utils/types/validators/ValidationResult';
import { WalletsValidator } from './utils/types/validators/WalletsValidator';
import { WalletValidator } from './utils/types/validators/WalletValidator';
import { WalletValidatorStrategy } from './utils/types/validators/WalletValidatorStrategy';
export { RepositoryStrategyType } from './repository/RepositoryStrategyType';
export { CompareAction } from './repository/models/CompareAction';
export { RpcTransport } from './repository/source/rpc/RpcTransport';
export { HttpTransport } from './repository/source/http/HttpTransport';
export { HttpInterceptor } from './repository/source/http/HttpInterceptor';
export { TransportFactory } from './repository/source/TransportFactory';
export { KeyPairFactory } from './utils/keypair/KeyPairFactory';
export { AccessTokenAccepter } from './utils/keypair/AccessTokenAccepter';
export { CryptoUtils } from './utils/CryptoUtils';
export { WalletUtils } from './utils/WalletUtils';
export { BitcoinUtils } from './utils/BitcoinUtils';
export { JsonUtils } from './utils/JsonUtils';
export { EthereumUtils } from './utils/EthereumUtils';
export { KeyPair } from './utils/keypair/KeyPair';
export { KeyPairHelper } from './utils/keypair/KeyPairHelper';
export { Permissions, AccessRight } from './utils/keypair/Permissions';
export { AcceptedField } from './utils/keypair/AcceptedField';
export { RpcToken } from './utils/keypair/rpc/RpcToken';
export { RpcAccessToken } from './utils/keypair/rpc/RpcAccessToken';
export { CryptoWallets, EthWalletData, BtcWalletData, AppWalletData, UsdWalletData, CryptoWalletsData, AppCryptoWallet, BtcCryptoWallet, EthCryptoWallet, UsdCryptoWallet, CryptoWallet, SupportSignedMessageData, StringSignedMessage, StringMessage, ProfileUser, } from './utils/types/BaseTypes';
export { AbstractWalletValidator, Account, AccountManager, AccessTokenInterceptor, AppWalletValidator, BitKeyPair, BtcWalletValidator, DataRequest, DataRequestManager, SharedData, FieldData, DeepCopy, EthWalletValidator, ExternalService, ExternalServicesManager, ExternalServicesRepository, FileMeta, GraphLink, HttpServiceCall, HttpTransportImpl, InputGraphData, IsBasePublicKey, IsBtcAddress, IsEthAddress, IsTypedArray, JsonRpc, JsonRpcHttpInterceptorAdapter, JsonObject, JsonTransform, LinkType, OutputGraphData, Offer, OfferManager, OfferPrice, OfferPriceRules, OfferRank, OfferRankManager, OfferRankManagerImpl, OfferRankRepositoryImpl, OfferResultAction, OfferInteraction, OfferSearch, OfferSearchRepository, OfferSearchRepositoryImpl, OfferSearchRequestInterestMode, OfferSearchResultItem, OfferShareData, OfferShareDataRepository, OfferShareDataRepositoryImpl, Pair, Page, Pageable, PermissionsSource, Profile, ProfileManager, RpcInterceptor, SearchManager, SearchRequest, ServiceCall, ServiceCallType, ServiceResponse, SimpleAccount, Site, SiteDataSource, SortOfferSearch, TokenType, ValidationResult, VerifyManager, WalletManager, WalletManagerImpl, WalletsValidator, WalletValidator, WalletValidatorStrategy, ClientDataRepository, OfferRepository, SearchRequestRepository, VerifyRepository };
export default class Base {
    private readonly _walletManager;
    private readonly _accountManager;
    private readonly _profileManager;
    private readonly _dataRequestManager;
    private readonly _offerManager;
    private readonly _searchManager;
    private readonly _verifyManager;
    private readonly _externalServicesManager;
    private readonly _authAccountBehavior;
    private readonly _repositoryStrategyInterceptor;
    private readonly _offerRankManager;
    private readonly transport;
    constructor(nodeHost: string, siteOrigin: string, strategy?: RepositoryStrategyType, signerHost?: string, loggerService?: Logger);
    changeStrategy(strategy: RepositoryStrategyType): void;
    readonly defaultTransport: HttpTransport;
    readonly walletManager: WalletManager;
    readonly accountManager: AccountManager;
    readonly profileManager: ProfileManager;
    readonly dataRequestManager: DataRequestManager;
    readonly offerManager: OfferManager;
    readonly searchManager: SearchManager;
    readonly verifyManager: VerifyManager;
    readonly externalServicesManager: ExternalServicesManager;
    readonly offerRankManager: OfferRankManager;
    private createNodeAssistant;
    private createKeyPairHelper;
}
